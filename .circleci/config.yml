version: 2.1

master_filter: &master_filter
  branches:
    only: master

develop_filter: &develop_filter
  branches:
    only: develop

stage_filter: &stage_filter
  branches:
    only: stage

legacy_ota_filter: &legacy_ota_filter
  branches:
    only: release-0.x-legacy

feature_filter: &feature_filter
  branches:
    ignore:
      - master
      - develop
      - stage
      - release-0.x-legacy

orbs:
  node: circleci/node@2.0.1
  slack: circleci/slack@3.2.0
  jq: circleci/jq@2.0.1
  coveralls: coveralls/coveralls@1.0.6

executors:
  node:
    docker:
      - image: circleci/ruby:latest-node
        environment:
          API_URL: $API_URL
          AMPLITUDE_KEY: $AMPLITUDE_KEY
    resource_class: large

commands:
  build:
    steps:
      - checkout
      - run: gem install bundler
      - run: bundle install
      - run: bundle update fastlane
      - run: yarn
      - run: yarn test:i18n 'sv-SE'
      - run: yarn test:i18n 'es'
  make_blank_env:
    steps:
      - run: echo "API_URL=" > .env
      - run: echo "AMPLITUDE_KEY=" >> .env
  make_env:
    steps:
      - run: echo "API_URL=$API_URL" > .env
      - run: echo "AMPLITUDE_KEY=$AMPLITUDE_KEY" >> .env
      - run: cat .env > .env.staging
      # - run: echo "MATCH_PASSWORD=$MATCH_PASSWORD" >> .env
      # - run: echo "iOS_SCHEME=$iOS_SCHEME" >> .env
      # - run: echo "iOS_APP_ID=$iOS_APP_ID" >> .env
      # - run: echo "APPCENTER_API_TOKEN=$APPCENTER_API_TOKEN" >> .env
      # - run: echo "APPCENTER_IOS_PROJECT_NAME=$APPCENTER_IOS_PROJECT_NAME" >> .env
      # - run: echo "APPCENTER_NOTIFY_GROUP=$APPCENTER_NOTIFY_GROUP" >> .env
      # - run: echo "APPCENTER_DESTINATION_TYPE=$APPCENTER_DESTINATION_TYPE" >> .env
      # - run: echo "FASTLANE_PASSWORD=$FASTLANE_PASSWORD" >> .env
      - run: echo "$GOOGLE_SERVICE_JSON" | base64 --decode > google-services.json
      - run: echo "apple_id("$APPLE_ID")" >> ios/Appfile

  lint:
    macos:
      xcode: 12.0.0
    steps:
      - run: yarn lint
      - run:
          command: |
            mkdir -p ~/reports
            eslint ./src/ --format junit --output-file ~/reports/eslint.xml
          when: always
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports       

  test:
    macos:
      xcode: 12.0.0
    steps:
      - run:
          name: Run tests with JUnit as reporter
          command: yarn test:coverage -- --ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
          
  login_to_expo:
    steps:
      - run: npx expo-cli login -u $EXPO_USERNAME -p $EXPO_PASSWORD
      - make_env
  set_release_channel:
    steps:
      - run:
          name: Set expo release channel
          command: |
            echo 'export RELEASE_CHANNEL=`cat app.json | jq -r '.expo.version' | cut -d. -f1`-$RELEASE_CHANNEL_SUFFIX' >> $BASH_ENV
  publish_to_expo:
    steps:
      - set_release_channel
      - login_to_expo
      - run: npx expo-cli publish --non-interactive --max-workers 1 --release-channel ${RELEASE_CHANNEL}
  deploy_android:
    steps:
      - run:
          command: npx expo-cli build:android -t app-bundle --release-channel ${RELEASE_CHANNEL} --non-interactive --no-publish
          no_output_timeout: 2h
      - run: curl -o fastlane/app.aab "$(npx expo-cli url:apk --non-interactive)"
      - run: echo "$PLAY_STORE_JSON" | base64 --decode > fastlane/playstore.json
      - run: bundle exec fastlane android $FASTLANE_LANE app_name:$APPCENTER_APP_NAME_ANDROID app_token:$APPCENTER_API_TOKEN
      - store_artifacts:
          path: ~/covid-react/fastlane/app.apk
  deploy_ios:
    steps:
      - run:
          command: npx expo-cli build:ios --release-channel ${RELEASE_CHANNEL} --non-interactive --no-publish
          no_output_timeout: 2h
      - run: curl -o fastlane/app.ipa "$(npx expo-cli url:ipa --non-interactive)"
      - run: bundle exec fastlane fastlane-credentials add --username $ITUNES_CONNECT_USER --password $ITUNES_CONNECT_PASSWORD
      - run: bundle exec fastlane ios $FASTLANE_LANE app_name:$APPCENTER_APP_NAME_IOS app_token:$APPCENTER_API_TOKEN
      - run: bundle exec fastlane fastlane-credentials remove --username $ITUNES_CONNECT_USER
      - store_artifacts:
          path: ~/covid-react/fastlane/app.ipa
  legacy_ota_publish:
    steps:
      - login_to_expo
      - run: npx expo-cli publish --non-interactive --max-workers 1 --release-channel 0.9-prod
      - run: npx expo-cli publish --non-interactive --max-workers 1 --release-channel 0.12-prod
      - run: npx expo-cli publish --non-interactive --max-workers 1 --release-channel 0.13-prod
  deploy_stage_appcenter:
    steps:
      - run: yarn fastlane:ios:stage
      # - run: yarn fastlane:android:stage

jobs:
          
  build_and_test:
    macos:
      xcode: 12.0.0
    working_directory: ~/covid-react
    steps:
      - make_blank_env
      - build
      - lint
      - run: yarn prettier
      - test
      - coveralls/upload
    
  deploy_stage:
    macos:
      xcode: 12.0.0
    working_directory: ~/covid-react
    steps:
      - build
      - deploy_stage_appcenter

  deploy:
    macos:
      xcode: 12.0.0
    working_directory: ~/covid-react
    steps:
      - build
      - publish_to_expo
      # - deploy_ios
      # - deploy_android
  legacy_deploy:
    executor: node
    working_directory: ~/covid-react
    steps:
      - build
      - legacy_ota_publish

workflows:
  build_and_test:
    jobs:
      - build_and_test:
          filters: *feature_filter
      - deploy_stage:
          filters: *feature_filter

  stage:
    jobs:
      - build_and_test:
          filters: *stage_filter
      - slack/approval-notification:
          message: Awaiting manual approval to deploy to stage
          context: slack-ci-covid-mobile
          requires:
            - build_and_test
          filters: *stage_filter
      - wait_for_approval:
          type: approval
          requires:
            - build_and_test
          filters: *stage_filter
      - deploy:
          filters: *stage_filter
          context: react-covid-tracker-stage
          requires:
            - wait_for_approval

  develop:
    jobs:
      - build_and_test:
          filters: *develop_filter
      - deploy:
          filters: *develop_filter
          context: react-covid-tracker-dev
          requires:
            - build_and_test

  master:
    jobs:
      - build_and_test:
          filters: *master_filter
      - slack/approval-notification:
          message: Awaiting manual approval to deploy to production
          context: slack-ci-covid-mobile
          requires:
            - build_and_test
          filters: *master_filter
      - wait_for_approval:
          type: approval
          requires:
            - build_and_test
          filters: *master_filter
      - deploy:
          filters: *master_filter
          context: react-covid-tracker-prod
          requires:
            - wait_for_approval

  legacy_ota_release:
    jobs:
      - build_and_test:
          filters: *legacy_ota_filter
      - slack/approval-notification:
          message: Awaiting manual approval to deploy to OTA 0.9-prod, 0.12-prd and 0.13-prod
          context: slack-ci-covid-mobile
          requires:
            - build_and_test
          filters: *legacy_ota_filter
      - wait_for_approval:
          type: approval
          requires:
            - build_and_test
          filters: *legacy_ota_filter
      - legacy_deploy:
          filters: *legacy_ota_filter
          context: react-covid-tracker-prod
          requires:
            - wait_for_approval
