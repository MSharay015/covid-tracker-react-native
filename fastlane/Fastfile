fastlane_version "2.160.0"

@keychain_name = "fastlane_tmp_keychain-db"

# iOS
@ios_app_id = ENV['iOS_APP_ID']
@ios_scheme = ENV['iOS_SCHEME']

# AppCenter configs
@ac_token = ENV['APPCENTER_API_TOKEN']
@ac_project_name = ENV['APPCENTER_PROJECT_NAME']
@ac_notify_group = ENV['APPCENTER_NOTIFY_GROUP']
@ac_destination_type = ENV['APPCENTER_DESTINATION_TYPE']

@slack_url = ENV['SLACK_WEB_HOOK']

default_platform(:ios)

lane :get_version_no do
  @build_number = ENV['BUILD_BUILDNUMBER'] || "1"

  @package_version = `node -e "console.log(require('../package.json').version);"`.strip!

  if @build_number == "1"
    @environment = "local"
  else
    @environment = ENV['NAME']  
  end

  #Only update the build number if its not already been updated
  if @build_number.include? "."
    @version = ENV['BUILD_BUILDNUMBER']
  else
    @version = "#{@package_version}.#{@build_number}-#{@environment}"
  end
  
  puts "Build Number is #{@build_number}"
  puts "Environment is #{@environment}"
  puts "Version is #{@version}"
end

lane :release_notes do
  @change_log = changelog_from_git_commits(pretty: 'â€¢ %s', merge_commit_filtering: 'exclude_merges', commits_count: 30)
end

# lane :release_notes do |options|
#   @change_log = conventional_changelog(format: 'markdown', title: options[:title])
# end


platform :android do

  before_all do
    @ac_notify_group = "Team_Zoe_android"
  end

  desc "Build Android app"
  lane :release do |options|

    get_version_no

    case ENV["NAME"]
    when "staging"
        build_type = "Release"
    else
        build_type = "Release"
    end

    print build_type

    android_set_version_name(
      version_name: @version,
      gradle_file: "./android/app/build.gradle"
    )

    android_set_version_code(
      version_code: "#{@build_number}",
      gradle_file: "./android/app/build.gradle"
    )

    gradle(
      task: "assemble",
      build_type: build_type,
      project_dir: "./android"   
    )
  end

  # this is a seperate lane so the build pipeline can use its own secure storage & signing step
  lane :publish do |options|

    track = 'beta'
    
    if options[:track]
      track = options[:track]
    end

    puts 'Playstore submission track is:' + track

    release_notes

    if options[:submit]
      upload_to_play_store(track: track)
    end

    if options[:appcenter]

      # production = covid_symptom_tracker_android 
      # Staging = covid_symptom_tracker_android_stage
      app_name = ENV["APPCENTER_ANDROID_NAME"]

      path = "android/app/build/outputs/apk/release/app-release.apk"

      # distribution group
     appDistGroup = ENV["APPCENTER_ANDROID_DIST_GROUP"]
      appcenter_upload(
        app_name: ENV['APPCENTER_ANDROID_NAME'],
        api_token: @ac_token,
        destinations: @ac_notify_group,
        destination_type: @ac_destination_type,
        file: path,
        owner_name: "Joinzoe",
        owner_type: "organization",
        notify_testers: true,
        release_notes: @change_log
      )
    end
  end

end

platform :ios do

  app_identifier = @ios_app_id
  @ac_notify_group = "iOS"
  @ac_project_name = ENV['APPCENTER_IOS_PROJECT_NAME']

  before_all do
    # if ENV['CI_MODE'] == 'true'
    #   # Setup tmp keychain on ci machine for ios certs
    #   build_tmp_keychain
    # end
    setup_circle_ci
  end

  lane :certificates do
    match(app_identifier: ["com.joinzoe.covid-zoe", "com.joinzoe.covid-zoe.qa"], readonly: true)
  end

  desc "Build"
  lane :release do |options|

    @match_mode = @ac_destination_type
    @export_method = nil
    @build_configuration = 'Release'

    get_version_no

    increment_build_number(
      xcodeproj: "./ios/Covid.xcodeproj",
      build_number: "#{@build_number}"
    )

    # next unless verify #(scheme: scheme, title: title, tag_prefix: tag_prefix)

    release_notes

    case options[:mode]
    when 'adhoc'
      # analyze_commits(match: '*')
      @match_mode = options[:mode]
      @export_method = 'ad-hoc'
      @build_configuration = 'Stage'
      @ac_destination_type ='group'
    when 'store'
      puts 'implement ios release'
    end
    
    puts @change_log

    match(
      type: @match_mode,
      app_identifier: @ios_app_id,
      git_branch: "master",
      readonly: true,
      verbose: true,
      keychain_name: @keychain_name,
      # keychain_password: keychain_password
    )

    gym(
      # clean: true,
      configuration: @build_configuration,
      export_method: @export_method,
      scheme: @ios_scheme,
      output_directory: "./build",
      workspace: "./ios/Covid.xcworkspace"
    )

    slack_payload = {
      'Build Date' => Time.new.to_s,
    }

    case options[:mode]
    when 'adhoc'
      appcenter
      # slack_payload['Upload to'] = 'AppCenter'
    when 'store'
      # Upload to app store
    end

    # slack(
    #   message: @change_log,
    #   slack_url: @slack_url,
    #   channel: "#ci-covid-mobile",
    #   success: true,
    #   payload: slack_payload,
    #   default_payloads: [:git_branch, :git_author],
    # )
  end

  lane :appcenter do
    appcenter_upload(
        app_name: @ac_project_name,
        api_token: @ac_token,
        destinations: @ac_notify_group,
        destination_type: @ac_destination_type,
        owner_name: "Joinzoe",
        owner_type: "organization",
        ipa: String.try_convert(SharedValues::IPA_OUTPUT_PATH),
        dsym: String.try_convert(SharedValues::DSYM_OUTPUT_PATH),
        release_notes: @change_log,
        notify_testers: true
      )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
